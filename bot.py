import logging
from datetime import datetime, timedelta
import pytz
import asyncio
import json
import os
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, MessageHandler, ContextTypes, filters
)

TOKEN = "7558281182:AAHqX6h6oVpMgyIgs5ayZ0mxTv7Zw7BnSI8"

# === –§–£–ù–ö–¶–ò–ò –°–û–•–†–ê–ù–ï–ù–ò–Ø/–ó–ê–ì–†–£–ó–ö–ò ===

def load_data():
    if os.path.exists("payments.json"):
        with open("payments.json", "r", encoding="utf-8") as f:
            loaded_payments = json.load(f)
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timestamp –æ–±—Ä–∞—Ç–Ω–æ –≤ datetime
            loaded_payments = [(uid, name, datetime.fromisoformat(ts), cid) for uid, name, ts, cid in loaded_payments]
    else:
        loaded_payments = []

    if os.path.exists("participants.json"):
        with open("participants.json", "r", encoding="utf-8") as f:
            raw_participants = json.load(f)
            loaded_participants = {int(k): tuple(v) for k, v in raw_participants.items()}
    else:
        loaded_participants = {}

    return loaded_payments, loaded_participants

def save_data():
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º payments —Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º datetime ‚Üí —Å—Ç—Ä–æ–∫–∞
    with open("payments.json", "w", encoding="utf-8") as f:
        json.dump(
            [(uid, name, ts.isoformat(), cid) for uid, name, ts, cid in payments],
            f, ensure_ascii=False, indent=2
        )

    with open("participants.json", "w", encoding="utf-8") as f:
        json.dump(participants, f, ensure_ascii=False, indent=2)

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===

payments, participants = load_data()

logging.basicConfig(level=logging.INFO)

def now_moscow():
    return datetime.now(pytz.timezone("Europe/Moscow"))

def get_recent_payments(chat_id):
    cutoff = now_moscow() - timedelta(days=4)
    return [(uid, name) for (uid, name, ts, cid) in payments if ts > cutoff and cid == chat_id]

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return

    user = update.effective_user
    chat_id = update.effective_chat.id
    text = update.message.text.strip()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
    participants[user.id] = (
        user.full_name,
        f"@{user.username}" if user.username else user.full_name,
        chat_id
    )

    if "#–æ–ø–ª–∞—Ç–∞" in text.lower():
        name = text.replace("#–æ–ø–ª–∞—Ç–∞", "").strip()
        payments.append((user.id, name, now_moscow(), chat_id))
        logging.info(f"–ó–∞–ø–∏—Å–∞–Ω–∞ –æ–ø–ª–∞—Ç–∞ –æ—Ç {name} –≤ —á–∞—Ç–µ {chat_id}")

    save_data()  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∏ –æ–ø–ª–∞—Ç—ã –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

async def friday_report(application):
    await asyncio.sleep(5)
    while True:
        now = now_moscow()
        if now.weekday() == 1 and now.hour == 21 and now.minute == 2:
            logging.info("–ù–∞—Å—Ç–∞–ª–æ –≤—Ä–µ–º—è –ø—è—Ç–Ω–∏—á–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞...")
            chat_ids = {c for (_, _, _, c) in payments}
            for chat_id in chat_ids:
                paid = get_recent_payments(chat_id)
                paid_ids = {uid for uid, _ in paid}
                paid_names = [name for _, name in paid]

                unpaid_tags = []
                for uid, (fullname, tag, cid) in participants.items():
                    if cid == chat_id and uid not in paid_ids:
                        unpaid_tags.append(tag)

                text = f"ü§ñ –ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä. –Ø –ø–æ—á–∏—Ç–∞–ª –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ä–∞–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å—É–ø–µ—Ä–≤–∏–∑–∏–∏ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ ‚Äî {len(paid_names)} —á–µ–ª–æ–≤–µ–∫:\n"
                if paid_names:
                    text += "\n" + "\n".join(f"‚Ä¢ {name}" for name in paid_names)
                else:
                    text += "\n‚Ä¢ –Ω–∏–∫—Ç–æ –Ω–µ –æ–ø–ª–∞—Ç–∏–ª üò®"

                text += "\n\n–ù–∞–ø–æ–º–∏–Ω–∞—é "
                if unpaid_tags:
                    text += ", ".join(unpaid_tags)
                    text += ", —á—Ç–æ –º–Ω–µ –ø—Ä–∏–¥—ë—Ç—Å—è –≤–∞—Å —É–¥–∞–ª–∏—Ç—å –∏–∑ —á–∞—Ç–∞, –µ—Å–ª–∏ –≤—ã –Ω–µ —Å–∫–∏–Ω–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã —Å #–æ–ø–ª–∞—Ç–∞ –¥–æ –∫–æ–Ω—Ü–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è :/"
                else:
                    text += "–≤—Å–µ–º, —á—Ç–æ –≤—ã –º–æ–ª–æ–¥—Ü—ã, –≤—Å–µ –æ–ø–ª–∞—Ç–∏–ª–∏! üéâ"

                try:
                    await application.bot.send_message(chat_id=chat_id, text=text)
                except Exception as e:
                    logging.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {chat_id}: {e}")
            await asyncio.sleep(65)
        else:
            await asyncio.sleep(20)

app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

async def main():
    asyncio.create_task(friday_report(app))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç –ø—è—Ç–Ω–∏—Ü—ã...")
    await app.run_polling()

import nest_asyncio
nest_asyncio.apply()
asyncio.run(main())
